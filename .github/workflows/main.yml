name: Ex0 - GIT and VS

on:
  push:
    branches:
      - main

jobs:
  build-pipeline-tools:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      ## Ignore building executable files that are already in cache ##
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            filesverifier
            valgrindverifier
            clearscreen
            printMessage
            printbanner
            CodesToMessages.csv
          key: ${{ runner.os }}-test-files

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt update
          sudo apt install git golang-go gcc build-essential

      - name: Build utils
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git clone https://gitlab.com/exercisetests/utils.git
          cd utils
          g++ clearscreen.cpp -o clearscreen
          g++ printbanner.cpp -o printbanner
          g++ printMessage.cpp -o printMessage
          chmod +x clearscreen
          chmod +x printbanner
          chmod +x printMessage
          mv clearscreen ..
          mv printbanner ..
          mv printMessage ..
          mv CodesToMessages.csv ..
          cd ..

      - name: Build files verifier
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git clone https://gitlab.com/exercisetests/verifysubmittedfiles.git
          cd verifysubmittedfiles
          go build .
          chmod +x filesverifier
          mv filesverifier ..
          cd ..

      - name: Clone exercise test repo
        run: |
          mkdir checkers
          git clone https://gitlab.com/exercisetests/ex0files.git
          cd ex0files
          mv PreSubmissionChecker.txt ../checkers
          cd ..

      ## Build Part1Tester.cpp and Part2Tester.cpp ##
      - name: Build Part1Tester
        run: |
          cd part1/queue
          g++ Part1Tester.cpp Queue.cpp -o part1_tester
          ls -la 

      - name: Build Part2Tester
        run: |
          cd part2
          g++ Part2Tester.cpp stack/LinkedList.cpp stack/Stack.cpp utils/Utils.cpp -o part2_tester
          ls -la 

      ## This step stores the executable files in cache ##
      - name: Cache compiled files
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: |
            filesverifier
            valgrindverifier
            clearscreen
            printMessage
            printbanner
            CodesToMessages.csv
            part1/queue/part1_tester
            part2/part2_tester
          key: ${{ runner.os }}-test-files

      - uses: actions/upload-artifact@v3
        with:
          name: pipeline-tools
          path: checkers

  run-tests:
    needs: build-pipeline-tools
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: pipeline-tools

      - name: Restore cloned files
        uses: actions/cache@v3
        with:
          path: |
            filesverifier
            valgrindverifier
            clearscreen
            printMessage
            printbanner
            CodesToMessages.csv
          key: ${{ runner.os }}-test-files

      ## Run Part1Tester executable ##
      - name: Run Part1 Tests
        run: |
          ./part1/queue/part1_tester || { echo "Executable not found during Part1 Tests"; exit 1; }

      ## Run Part2Tester executable ##
      - name: Run Part2 Tests
        run: |
          ./part2/part2_tester || { echo "Executable not found during Part2 Tests"; exit 1; }
